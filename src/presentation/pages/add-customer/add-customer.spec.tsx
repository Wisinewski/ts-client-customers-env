import React from 'react'
import { render } from '@testing-library/react'
import AddCustomer from './add-customer'

describe('Name of the group', () => {
  test('should start with initial state', () => {
    const { getByTestId } = render(<AddCustomer />)
    const errorWrap = getByTestId('error-wrap')
    expect(errorWrap.childElementCount).toBe(0)
    const createButton = getByTestId('createButton') as HTMLButtonElement
    expect(createButton.disabled).toBe(true)
    const nameStatus = getByTestId('name-status')
    expect(nameStatus.title).toBe('Campo obrigatório')
    expect(nameStatus.textContent).toBe('ℹ️')
    const templateNameStatus = getByTestId('templateName-status')
    expect(templateNameStatus.title).toBe('Campo obrigatório')
    expect(templateNameStatus.textContent).toBe('ℹ️')
    const templateTypeStatus = getByTestId('templateType-status')
    expect(templateTypeStatus.title).toBe('Campo obrigatório')
    expect(templateTypeStatus.textContent).toBe('ℹ️')
    const templateCiStatus = getByTestId('templateCi-status')
    expect(templateCiStatus.title).toBe('Campo opcional')
    expect(templateCiStatus.textContent).toBe('ℹ️')
    const templateCdStatus = getByTestId('templateCd-status')
    expect(templateCdStatus.title).toBe('Campo opcional')
    expect(templateCdStatus.textContent).toBe('ℹ️')
    const templateVendorStatus = getByTestId('templateVendor-status')
    expect(templateVendorStatus.title).toBe('Campo opcional')
    expect(templateVendorStatus.textContent).toBe('ℹ️')
    const templateLangStatus = getByTestId('templateLang-status')
    expect(templateLangStatus.title).toBe('Campo obrigatório')
    expect(templateLangStatus.textContent).toBe('ℹ️')
    const templateVersionStatus = getByTestId('templateVersion-status')
    expect(templateVersionStatus.title).toBe('Campo obrigatório')
    expect(templateVersionStatus.textContent).toBe('ℹ️')
    const templatePathStatus = getByTestId('templatePath-status')
    expect(templatePathStatus.title).toBe('Campo obrigatório')
    expect(templatePathStatus.textContent).toBe('ℹ️')
    const templateToolStatus = getByTestId('templateTool-status')
    expect(templateToolStatus.title).toBe('Campo obrigatório')
    expect(templateToolStatus.textContent).toBe('ℹ️')
    const gitUserStatus = getByTestId('gitUser-status')
    expect(gitUserStatus.title).toBe('Campo obrigatório')
    expect(gitUserStatus.textContent).toBe('ℹ️')
    const gitPasswordStatus = getByTestId('gitPassword-status')
    expect(gitPasswordStatus.title).toBe('Campo obrigatório')
    expect(gitPasswordStatus.textContent).toBe('ℹ️')
    const sonarHostStatus = getByTestId('sonarHost-status')
    expect(sonarHostStatus.title).toBe('Campo obrigatório')
    expect(sonarHostStatus.textContent).toBe('ℹ️')
    const sonarTokenStatus = getByTestId('sonarToken-status')
    expect(sonarTokenStatus.title).toBe('Campo obrigatório')
    expect(sonarTokenStatus.textContent).toBe('ℹ️')
    const remoteStateNameStatus = getByTestId('remoteStateName-status')
    expect(remoteStateNameStatus.title).toBe('Campo obrigatório')
    expect(remoteStateNameStatus.textContent).toBe('ℹ️')
    const remoteStateBusinessUnitStatus = getByTestId('remoteStateBusinessUnit-status')
    expect(remoteStateBusinessUnitStatus.title).toBe('Campo opcional')
    expect(remoteStateBusinessUnitStatus.textContent).toBe('ℹ️')
    const remoteStateEnvironmentStatus = getByTestId('remoteStateEnvironment-status')
    expect(remoteStateEnvironmentStatus.title).toBe('Campo opcional')
    expect(remoteStateEnvironmentStatus.textContent).toBe('ℹ️')
    const remoteStateVendorStatus = getByTestId('remoteStateVendor-status')
    expect(remoteStateVendorStatus.title).toBe('Campo obrigatório')
    expect(remoteStateVendorStatus.textContent).toBe('ℹ️')
    const remoteStateRegionStatus = getByTestId('remoteStateRegion-status')
    expect(remoteStateRegionStatus.title).toBe('Campo obrigatório')
    expect(remoteStateRegionStatus.textContent).toBe('ℹ️')
    const remoteStateTypeStatus = getByTestId('remoteStateType-status')
    expect(remoteStateTypeStatus.title).toBe('Campo obrigatório')
    expect(remoteStateTypeStatus.textContent).toBe('ℹ️')
    const outputNameStatus = getByTestId('outputName-status')
    expect(outputNameStatus.title).toBe('Campo obrigatório')
    expect(outputNameStatus.textContent).toBe('ℹ️')
  })
})
